/* tslint:disable */
/* eslint-disable */
/**
 * Тестовый проект Медузы — API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Component
 */
export interface Component {
    /**
     * Идентификатор компонента
     * @type {number}
     * @memberof Component
     */
    id?: number;
    /**
     * Идентификатор публикации
     * @type {number}
     * @memberof Component
     */
    post_id?: number;
    /**
     * Является ли компонент публичным
     * @type {boolean}
     * @memberof Component
     */
    _public?: boolean;
    /**
     * Тип значения компонента (строка, булево, вложения)
     * @type {string}
     * @memberof Component
     */
    type?: ComponentTypeEnum;
    /**
     * Значение компонента
     * @type {string | boolean | Array<PostReference>}
     * @memberof Component
     */
    value?: string | boolean | Array<PostReference>;
    /**
     * Порядковый номер компонента в публикации (0=первый)
     * @type {number}
     * @memberof Component
     */
    order?: number;
    /**
     * Класс для отображения на клиентской стороне
     * @type {string}
     * @memberof Component
     */
    display_class?: string;
    /**
     * Настраиваемые поля (словарь)
     * @type {{ [key: string]: string; }}
     * @memberof Component
     */
    custom_fields?: { [key: string]: string; };
}

/**
    * @export
    * @enum {string}
    */
export enum ComponentTypeEnum {
    String = 'string',
    Boolean = 'boolean',
    Relation = 'relation'
}

/**
 * 
 * @export
 * @interface NewComponent
 */
export interface NewComponent {
    /**
     * Является ли компонент публичным
     * @type {boolean}
     * @memberof NewComponent
     */
    _public?: boolean;
    /**
     * Тип значения компонента (строка, булево, вложения)
     * @type {string}
     * @memberof NewComponent
     */
    type?: NewComponentTypeEnum;
    /**
     * Значение компонента
     * @type {string | boolean | Array<PostReference>}
     * @memberof NewComponent
     */
    value?: string | boolean | Array<PostReference>;
    /**
     * Порядковый номер компонента в публикации (0=первый)
     * @type {number}
     * @memberof NewComponent
     */
    order?: number;
    /**
     * Класс для отображения на клиентской стороне
     * @type {string}
     * @memberof NewComponent
     */
    display_class?: string;
    /**
     * Настраиваемые поля (словарь)
     * @type {{ [key: string]: string; }}
     * @memberof NewComponent
     */
    custom_fields?: { [key: string]: string; };
}

/**
    * @export
    * @enum {string}
    */
export enum NewComponentTypeEnum {
    String = 'string',
    Boolean = 'boolean',
    Relation = 'relation'
}

/**
 * 
 * @export
 * @interface NewPost
 */
export interface NewPost {
    /**
     * Внутреннее название публикации
     * @type {string}
     * @memberof NewPost
     */
    name?: string;
    /**
     * Человекочитаемый URL
     * @type {string}
     * @memberof NewPost
     */
    seo_url?: string;
}
/**
 * 
 * @export
 * @interface Post
 */
export interface Post {
    /**
     * 
     * @type {number}
     * @memberof Post
     */
    id?: number;
    /**
     * Внутреннее название публикации
     * @type {string}
     * @memberof Post
     */
    name?: string;
    /**
     * Человекочитаемый URL
     * @type {string}
     * @memberof Post
     */
    seo_url?: string;
}
/**
 * 
 * @export
 * @interface PostReference
 */
export interface PostReference {
    /**
     * Идентификатор публикации
     * @type {number}
     * @memberof PostReference
     */
    post_id?: number;
}

/**
 * ComponentsApi - axios parameter creator
 * @export
 */
export const ComponentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Создать новый компонент в публикации
         * @param {number} postId Идентификатор публикации
         * @param {NewComponent} body Компонент, который необходимо добавить
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComponent: async (postId: number, body: NewComponent, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            if (postId === null || postId === undefined) {
                throw new RequiredError('postId','Required parameter postId was null or undefined when calling createComponent.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createComponent.');
            }
            const localVarPath = `/posts/{post_id}/components`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof body !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удалить компонент
         * @param {number} postId Идентификатор публикации
         * @param {number} componentId Идентификатор компонента
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteComponent: async (postId: number, componentId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            if (postId === null || postId === undefined) {
                throw new RequiredError('postId','Required parameter postId was null or undefined when calling deleteComponent.');
            }
            // verify required parameter 'componentId' is not null or undefined
            if (componentId === null || componentId === undefined) {
                throw new RequiredError('componentId','Required parameter componentId was null or undefined when calling deleteComponent.');
            }
            const localVarPath = `/posts/{post_id}/components/{component_id}`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(postId)))
                .replace(`{${"component_id"}}`, encodeURIComponent(String(componentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Сведения о компоненте
         * @param {number} postId Идентификатор публикации
         * @param {number} componentId Идентификатор компонента
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComponent: async (postId: number, componentId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            if (postId === null || postId === undefined) {
                throw new RequiredError('postId','Required parameter postId was null or undefined when calling getComponent.');
            }
            // verify required parameter 'componentId' is not null or undefined
            if (componentId === null || componentId === undefined) {
                throw new RequiredError('componentId','Required parameter componentId was null or undefined when calling getComponent.');
            }
            const localVarPath = `/posts/{post_id}/components/{component_id}`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(postId)))
                .replace(`{${"component_id"}}`, encodeURIComponent(String(componentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить все компоненты данной публикации
         * @param {number} postId Идентификатор публикации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexComponents: async (postId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            if (postId === null || postId === undefined) {
                throw new RequiredError('postId','Required parameter postId was null or undefined when calling indexComponents.');
            }
            const localVarPath = `/posts/{post_id}/components`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновить компонент
         * @param {number} postId Идентификатор публикации
         * @param {number} componentId Идентификатор компонента
         * @param {Component} body Актуальные сведения о компоненте
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComponent: async (postId: number, componentId: number, body: Component, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            if (postId === null || postId === undefined) {
                throw new RequiredError('postId','Required parameter postId was null or undefined when calling updateComponent.');
            }
            // verify required parameter 'componentId' is not null or undefined
            if (componentId === null || componentId === undefined) {
                throw new RequiredError('componentId','Required parameter componentId was null or undefined when calling updateComponent.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateComponent.');
            }
            const localVarPath = `/posts/{post_id}/components/{component_id}`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(postId)))
                .replace(`{${"component_id"}}`, encodeURIComponent(String(componentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof body !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ComponentsApi - functional programming interface
 * @export
 */
export const ComponentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Создать новый компонент в публикации
         * @param {number} postId Идентификатор публикации
         * @param {NewComponent} body Компонент, который необходимо добавить
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createComponent(postId: number, body: NewComponent, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Component>> {
            const localVarAxiosArgs = await ComponentsApiAxiosParamCreator(configuration).createComponent(postId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Удалить компонент
         * @param {number} postId Идентификатор публикации
         * @param {number} componentId Идентификатор компонента
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteComponent(postId: number, componentId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ComponentsApiAxiosParamCreator(configuration).deleteComponent(postId, componentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Сведения о компоненте
         * @param {number} postId Идентификатор публикации
         * @param {number} componentId Идентификатор компонента
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComponent(postId: number, componentId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Component>> {
            const localVarAxiosArgs = await ComponentsApiAxiosParamCreator(configuration).getComponent(postId, componentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Получить все компоненты данной публикации
         * @param {number} postId Идентификатор публикации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexComponents(postId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Component>>> {
            const localVarAxiosArgs = await ComponentsApiAxiosParamCreator(configuration).indexComponents(postId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Обновить компонент
         * @param {number} postId Идентификатор публикации
         * @param {number} componentId Идентификатор компонента
         * @param {Component} body Актуальные сведения о компоненте
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateComponent(postId: number, componentId: number, body: Component, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Component>> {
            const localVarAxiosArgs = await ComponentsApiAxiosParamCreator(configuration).updateComponent(postId, componentId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ComponentsApi - factory interface
 * @export
 */
export const ComponentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Создать новый компонент в публикации
         * @param {number} postId Идентификатор публикации
         * @param {NewComponent} body Компонент, который необходимо добавить
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComponent(postId: number, body: NewComponent, options?: any): AxiosPromise<Component> {
            return ComponentsApiFp(configuration).createComponent(postId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удалить компонент
         * @param {number} postId Идентификатор публикации
         * @param {number} componentId Идентификатор компонента
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteComponent(postId: number, componentId: number, options?: any): AxiosPromise<void> {
            return ComponentsApiFp(configuration).deleteComponent(postId, componentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Сведения о компоненте
         * @param {number} postId Идентификатор публикации
         * @param {number} componentId Идентификатор компонента
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComponent(postId: number, componentId: number, options?: any): AxiosPromise<Component> {
            return ComponentsApiFp(configuration).getComponent(postId, componentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить все компоненты данной публикации
         * @param {number} postId Идентификатор публикации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexComponents(postId: number, options?: any): AxiosPromise<Array<Component>> {
            return ComponentsApiFp(configuration).indexComponents(postId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновить компонент
         * @param {number} postId Идентификатор публикации
         * @param {number} componentId Идентификатор компонента
         * @param {Component} body Актуальные сведения о компоненте
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComponent(postId: number, componentId: number, body: Component, options?: any): AxiosPromise<Component> {
            return ComponentsApiFp(configuration).updateComponent(postId, componentId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ComponentsApi - object-oriented interface
 * @export
 * @class ComponentsApi
 * @extends {BaseAPI}
 */
export class ComponentsApi extends BaseAPI {
    /**
     * 
     * @summary Создать новый компонент в публикации
     * @param {number} postId Идентификатор публикации
     * @param {NewComponent} body Компонент, который необходимо добавить
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    public createComponent(postId: number, body: NewComponent, options?: any) {
        return ComponentsApiFp(this.configuration).createComponent(postId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удалить компонент
     * @param {number} postId Идентификатор публикации
     * @param {number} componentId Идентификатор компонента
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    public deleteComponent(postId: number, componentId: number, options?: any) {
        return ComponentsApiFp(this.configuration).deleteComponent(postId, componentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Сведения о компоненте
     * @param {number} postId Идентификатор публикации
     * @param {number} componentId Идентификатор компонента
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    public getComponent(postId: number, componentId: number, options?: any) {
        return ComponentsApiFp(this.configuration).getComponent(postId, componentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить все компоненты данной публикации
     * @param {number} postId Идентификатор публикации
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    public indexComponents(postId: number, options?: any) {
        return ComponentsApiFp(this.configuration).indexComponents(postId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновить компонент
     * @param {number} postId Идентификатор публикации
     * @param {number} componentId Идентификатор компонента
     * @param {Component} body Актуальные сведения о компоненте
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComponentsApi
     */
    public updateComponent(postId: number, componentId: number, body: Component, options?: any) {
        return ComponentsApiFp(this.configuration).updateComponent(postId, componentId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PostsApi - axios parameter creator
 * @export
 */
export const PostsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Создать новую публикацию
         * @param {NewPost} body Публикация, которую необходимо добавить
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: async (body: NewPost, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createPost.');
            }
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof body !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удалить публикацию
         * @param {number} postId Идентификатор публикации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost: async (postId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            if (postId === null || postId === undefined) {
                throw new RequiredError('postId','Required parameter postId was null or undefined when calling deletePost.');
            }
            const localVarPath = `/posts/{post_id}`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить публикацию по идентификатору
         * @param {number} postId Идентификатор публикации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPost: async (postId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            if (postId === null || postId === undefined) {
                throw new RequiredError('postId','Required parameter postId was null or undefined when calling getPost.');
            }
            const localVarPath = `/posts/{post_id}`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить все публикации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexPosts: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновление публикации
         * @param {number} postId Идентификатор публикации
         * @param {Post} body Актуальные сведения о публикации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePost: async (postId: number, body: Post, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            if (postId === null || postId === undefined) {
                throw new RequiredError('postId','Required parameter postId was null or undefined when calling updatePost.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updatePost.');
            }
            const localVarPath = `/posts/{post_id}`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof body !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(body !== undefined ? body : {})
                : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostsApi - functional programming interface
 * @export
 */
export const PostsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Создать новую публикацию
         * @param {NewPost} body Публикация, которую необходимо добавить
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPost(body: NewPost, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>> {
            const localVarAxiosArgs = await PostsApiAxiosParamCreator(configuration).createPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Удалить публикацию
         * @param {number} postId Идентификатор публикации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePost(postId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PostsApiAxiosParamCreator(configuration).deletePost(postId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Получить публикацию по идентификатору
         * @param {number} postId Идентификатор публикации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPost(postId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>> {
            const localVarAxiosArgs = await PostsApiAxiosParamCreator(configuration).getPost(postId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Получить все публикации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexPosts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Post>>> {
            const localVarAxiosArgs = await PostsApiAxiosParamCreator(configuration).indexPosts(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Обновление публикации
         * @param {number} postId Идентификатор публикации
         * @param {Post} body Актуальные сведения о публикации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePost(postId: number, body: Post, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>> {
            const localVarAxiosArgs = await PostsApiAxiosParamCreator(configuration).updatePost(postId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PostsApi - factory interface
 * @export
 */
export const PostsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Создать новую публикацию
         * @param {NewPost} body Публикация, которую необходимо добавить
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(body: NewPost, options?: any): AxiosPromise<Post> {
            return PostsApiFp(configuration).createPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удалить публикацию
         * @param {number} postId Идентификатор публикации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost(postId: number, options?: any): AxiosPromise<void> {
            return PostsApiFp(configuration).deletePost(postId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить публикацию по идентификатору
         * @param {number} postId Идентификатор публикации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPost(postId: number, options?: any): AxiosPromise<Post> {
            return PostsApiFp(configuration).getPost(postId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить все публикации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexPosts(options?: any): AxiosPromise<Array<Post>> {
            return PostsApiFp(configuration).indexPosts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновление публикации
         * @param {number} postId Идентификатор публикации
         * @param {Post} body Актуальные сведения о публикации
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePost(postId: number, body: Post, options?: any): AxiosPromise<Post> {
            return PostsApiFp(configuration).updatePost(postId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
export class PostsApi extends BaseAPI {
    /**
     * 
     * @summary Создать новую публикацию
     * @param {NewPost} body Публикация, которую необходимо добавить
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public createPost(body: NewPost, options?: any) {
        return PostsApiFp(this.configuration).createPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удалить публикацию
     * @param {number} postId Идентификатор публикации
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public deletePost(postId: number, options?: any) {
        return PostsApiFp(this.configuration).deletePost(postId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить публикацию по идентификатору
     * @param {number} postId Идентификатор публикации
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public getPost(postId: number, options?: any) {
        return PostsApiFp(this.configuration).getPost(postId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить все публикации
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public indexPosts(options?: any) {
        return PostsApiFp(this.configuration).indexPosts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновление публикации
     * @param {number} postId Идентификатор публикации
     * @param {Post} body Актуальные сведения о публикации
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public updatePost(postId: number, body: Post, options?: any) {
        return PostsApiFp(this.configuration).updatePost(postId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


